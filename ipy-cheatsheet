%timeit

python basics
	list[start:stop:stepsize]
	strings are immutable
	switch values: a,b = b,a
	assert(1+2==3)
	assert(3*3==6, "errormessage")

def function(n):  # how to document functions, arguments, return values
	'''
	n - argument
	'''

X = [0.1*x-5 for x in range(100)]
Y = [x**2 for x in X]
plt.figure()
plt.figure(figsize=(x,y))
plt.plot(X,Y)  # draw
plt.plot(X,[Y1, Y2, ..., Yn].T)
plt.subplot(rows,columns,index)
plt.show()  # make plot visible
plt.clf()  # delete everything from the figure
plt.loglog(X,Y)
plt.legend(['x^2','x^3'], loc='upper left')
plt.xlabel('y', fontsize=18)
plt.ylabel('y', fontsize=18)
plt.title('standard plot')
plt.xticks([0.1, 1./3, 1, 10./3, 10],['0.1', '0.33333', '1', '3.3333', '10'])
plt.savefig('folder/file.pdf')
plt.plot(X[cross],Y[cross],'o',color='red',markersize=20,fillstyle='none')
plt.rc('text',usetex=True)
plt.axis('equal')  # preserve aspect ratio
plt.xlim([180,0])  # reverse x-axis (assuming it was [0,180] before)

if dict.has_key(k): return dict[k];
dict[key] = value
dict.keys()
dict.values()
len(array) # length of array
str(n) # convert n to string
type(n) # type of variable

random.random()

MATRICES
A = [[00, 01, 02], [10, 11, 12], [20, 21, 22]]
A[0][1] = 01  # A[row][column]
A = np.zeros([2,3])
A = np.ones([2,3])
A = np.ones([2,3])*2 # [[2,2,2],[2,2,2]]
A = np.random.rand(2,3)
A.T  # transpose
A*B  # elementwise product, c_ij = a_ij * b_ij
np.dot(A,B)  # dot product
A[:,::-1]  # invert columns
None == np.fill_diagonal(A,0)

colors = ['red','green','yellow','blue']
for i,color in enumerate(colors): ...

DEBUGGING
%debug  # start debugging after crash
locals()  # dict of local variables
p n  # evaluates and prints n
globals()  # dict of global variables
globals().keys()  # names of global variables
ii in command mode  # interrupt execution if fct doesn't terminate
%prun function(args)  # profiling
import pdb
pdb.set_trace()  # breakpoint
s  # execute next line
c  # continue execution until next breakpoint

PROFILING
%prun fun(args)

broadcasting, x.T Zeilenvektor, v Spaltenvektor ((n,1)-Matrix)
	x.T + v = x.T mit v elementweise zu einer Matrix durchmultipliziert

# save file
np.savez('folder/file',array_c=c)
# load file
file_object = np.load('data/broadcasted.npz')  # file_object.files == ['array_c']
L = file_object['array_c']  # copy of original matrix

plt.imshow(M)  # plot an image
plt.imshow(M, interpolation='nearest')  # plot an image
plt.imshow(M, cmap='gray')  # different color-map
plt.imshow(M, cmap='gray_r')  # inverted color-map
np_array.reshape(x,y,...)  # reshape a matrix (aendert nur Array-Schachtelung, aendert nicht den Speicher)
np_array.reshape(2,3,2,-1)  # guess last dimension

select submatrix
M.shape  # (316, 515, 6)
W[0:316:1, 0:515:1, 1].shape  # (316, 515)
W[:, :, 1].shape  # (316, 515)

np.concatenate([a,b],0)  # axis = 0
np.vstack([a,b])  # acts like above
np.hstack([a,b])  # like concat with axis = 1
np.append(A,a,1) # append a column to matrix
A = np.append(list, value)  # append value to 1-dimensional np-array

# create column vector
np.arange(1,6)[:,np.newaxis]

# find entries smaller than 0.5
indices = matrix < 0.5  # produces true/false matrix

True for numpy is 1
False for numpy is 0

# find minimum of each column
np.min(D, axis=0)

labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
sizes = [15, 30, 45, 10, ]
colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
explode = (0, 0.1, 0, 0) # only "explode" the 2nd slice (i.e. 'Hogs')
plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True)
plt.axis('equal')  # make sure it's a circle and not ellipsoid
plt.title('advanced pie plot')

time, result = timedcall(fn, arg1, arg2, ..., argN)

np.mean(matrix)  # calcs the means of all values in matrix
np.sum(matrix,0)  # sum rows
np.sum(matrix,1)  # sum columns
row[np.newaxis,:]  # make row 2-dimensional
column[:,np.newaxis]  # make column 2-dimensional

# Av = lv, v eigenvector, l eigenvalue
la.eig(S) -> l,v  # l eigenvalues, v normalized eigenvectors
la.eigh(S) -> lh,vh  # eigenvalues of symmetric matrix, more precise than above

# project vector v on normalized vector b
proj = np.dot(b.T,v)
proj_vector = b * proj

np.cumsum(range(101))  # adds values commulatively

# covariance
# indicates how 2 variables vary together
C = np.cov(matrix)  # covariance matrix


# broadcasting
(1024,400) - (1024,)[:,np.newaxis]

# quantile:
medians [25%-value, 50%-value, 75%-value]

np.random.randn(2,3)

# numpy automatically extends matrices along the missing axis
# want to multiply each row of a matrix? multiply with a 1-dimensional vector
# want to multiply each column of a matrix? multiply with a column vector (n x 1)

# for matrix products, matrices have to have these dims: (. x k).dot(k x .)
# (d*k)(k*n) = (d,n)

my_array[labels == 0]  # choose only zero-labeled items from my_array

np.random.uniform(-1., 1., n)  # generate numbers between -1, 1
np.random.permutation(n)[:how_many]

A_ij*B_ij => elementwise product
sum_k A_ik*B_kj => A.dot(B)
sum_k A_ik*B_jk => A.dot(B.T)

indices = np.argsort(A)  # sorts asc.
indices = np.argwhere(A == 1)  # like A[A==1] but returns indices
